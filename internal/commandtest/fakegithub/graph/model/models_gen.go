// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Actor interface {
	IsActor()
	GetLogin() string
}

type Node interface {
	IsNode()
	GetID() string
}

type SearchResultItem interface {
	IsSearchResultItem()
}

type IssueCommentConnection struct {
	TotalCount int32 `json:"totalCount"`
}

type IssueCommentOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     IssueCommentOrderField `json:"field"`
}

type IssueOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     IssueOrderField `json:"field"`
}

type PullRequest struct {
	ID         string                       `json:"id"`
	Author     Actor                        `json:"author,omitempty"`
	BaseRefOid string                       `json:"baseRefOid"`
	Number     int32                        `json:"number"`
	Title      string                       `json:"title"`
	CreatedAt  string                       `json:"createdAt"`
	HeadRef    *Ref                         `json:"headRef,omitempty"`
	Comments   *IssueCommentConnection      `json:"comments"`
	Repository *Repository                  `json:"repository"`
	Reviews    *PullRequestReviewConnection `json:"reviews,omitempty"`
}

func (PullRequest) IsNode()            {}
func (this PullRequest) GetID() string { return this.ID }

func (PullRequest) IsSearchResultItem() {}

type PullRequestConnection struct {
	Edges      []*PullRequestEdge `json:"edges,omitempty"`
	Nodes      []*PullRequest     `json:"nodes,omitempty"`
	TotalCount int32              `json:"totalCount"`
}

type PullRequestEdge struct {
	Cursor string       `json:"cursor"`
	Node   *PullRequest `json:"node,omitempty"`
}

type PullRequestReview struct {
	Author    Actor                               `json:"author,omitempty"`
	Body      string                              `json:"body"`
	Comments  *PullRequestReviewCommentConnection `json:"comments"`
	CreatedAt string                              `json:"createdAt"`
	ID        string                              `json:"id"`
}

func (PullRequestReview) IsNode()            {}
func (this PullRequestReview) GetID() string { return this.ID }

type PullRequestReviewComment struct {
	Author    Actor  `json:"author,omitempty"`
	Body      string `json:"body"`
	CreatedAt string `json:"createdAt"`
	DiffHunk  string `json:"diffHunk"`
}

type PullRequestReviewCommentConnection struct {
	Edges      []*PullRequestReviewCommentEdge `json:"edges,omitempty"`
	TotalCount int32                           `json:"totalCount"`
}

type PullRequestReviewCommentEdge struct {
	Node *PullRequestReviewComment `json:"node,omitempty"`
}

type PullRequestReviewConnection struct {
	Edges []*PullRequestReviewEdge `json:"edges,omitempty"`
}

type PullRequestReviewEdge struct {
	Node *PullRequestReview `json:"node,omitempty"`
}

type Query struct {
}

type Ref struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (Ref) IsNode()            {}
func (this Ref) GetID() string { return this.ID }

type Repository struct {
	ID           string                 `json:"id"`
	Name         string                 `json:"name"`
	PullRequests *PullRequestConnection `json:"pullRequests"`
}

func (Repository) IsNode()            {}
func (this Repository) GetID() string { return this.ID }

func (Repository) IsSearchResultItem() {}

type SearchResultItemConnection struct {
	Edges []*SearchResultItemEdge `json:"edges,omitempty"`
}

type SearchResultItemEdge struct {
	Node SearchResultItem `json:"node,omitempty"`
}

type User struct {
	Login string  `json:"login"`
	Name  *string `json:"name,omitempty"`
}

func (User) IsActor()              {}
func (this User) GetLogin() string { return this.Login }

func (User) IsSearchResultItem() {}

type IssueCommentOrderField string

const (
	IssueCommentOrderFieldUpdatedAt IssueCommentOrderField = "UPDATED_AT"
)

var AllIssueCommentOrderField = []IssueCommentOrderField{
	IssueCommentOrderFieldUpdatedAt,
}

func (e IssueCommentOrderField) IsValid() bool {
	switch e {
	case IssueCommentOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e IssueCommentOrderField) String() string {
	return string(e)
}

func (e *IssueCommentOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IssueCommentOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IssueCommentOrderField", str)
	}
	return nil
}

func (e IssueCommentOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *IssueCommentOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e IssueCommentOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type IssueOrderField string

const (
	IssueOrderFieldComments  IssueOrderField = "COMMENTS"
	IssueOrderFieldCreatedAt IssueOrderField = "CREATED_AT"
	IssueOrderFieldUpdatedAt IssueOrderField = "UPDATED_AT"
)

var AllIssueOrderField = []IssueOrderField{
	IssueOrderFieldComments,
	IssueOrderFieldCreatedAt,
	IssueOrderFieldUpdatedAt,
}

func (e IssueOrderField) IsValid() bool {
	switch e {
	case IssueOrderFieldComments, IssueOrderFieldCreatedAt, IssueOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e IssueOrderField) String() string {
	return string(e)
}

func (e *IssueOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IssueOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IssueOrderField", str)
	}
	return nil
}

func (e IssueOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *IssueOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e IssueOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderDirection) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderDirection) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PullRequestReviewState string

const (
	PullRequestReviewStateApproved         PullRequestReviewState = "APPROVED"
	PullRequestReviewStateChangesRequested PullRequestReviewState = "CHANGES_REQUESTED"
	PullRequestReviewStateCommented        PullRequestReviewState = "COMMENTED"
	PullRequestReviewStateDismissed        PullRequestReviewState = "DISMISSED"
	PullRequestReviewStatePending          PullRequestReviewState = "PENDING"
)

var AllPullRequestReviewState = []PullRequestReviewState{
	PullRequestReviewStateApproved,
	PullRequestReviewStateChangesRequested,
	PullRequestReviewStateCommented,
	PullRequestReviewStateDismissed,
	PullRequestReviewStatePending,
}

func (e PullRequestReviewState) IsValid() bool {
	switch e {
	case PullRequestReviewStateApproved, PullRequestReviewStateChangesRequested, PullRequestReviewStateCommented, PullRequestReviewStateDismissed, PullRequestReviewStatePending:
		return true
	}
	return false
}

func (e PullRequestReviewState) String() string {
	return string(e)
}

func (e *PullRequestReviewState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestReviewState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestReviewState", str)
	}
	return nil
}

func (e PullRequestReviewState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PullRequestReviewState) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PullRequestReviewState) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PullRequestState string

const (
	PullRequestStateClosed PullRequestState = "CLOSED"
	PullRequestStateMerged PullRequestState = "MERGED"
	PullRequestStateOpen   PullRequestState = "OPEN"
)

var AllPullRequestState = []PullRequestState{
	PullRequestStateClosed,
	PullRequestStateMerged,
	PullRequestStateOpen,
}

func (e PullRequestState) IsValid() bool {
	switch e {
	case PullRequestStateClosed, PullRequestStateMerged, PullRequestStateOpen:
		return true
	}
	return false
}

func (e PullRequestState) String() string {
	return string(e)
}

func (e *PullRequestState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestState", str)
	}
	return nil
}

func (e PullRequestState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PullRequestState) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PullRequestState) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SearchType string

const (
	SearchTypeDiscussion SearchType = "DISCUSSION"
	SearchTypeIssue      SearchType = "ISSUE"
	SearchTypeRepository SearchType = "REPOSITORY"
	SearchTypeUser       SearchType = "USER"
)

var AllSearchType = []SearchType{
	SearchTypeDiscussion,
	SearchTypeIssue,
	SearchTypeRepository,
	SearchTypeUser,
}

func (e SearchType) IsValid() bool {
	switch e {
	case SearchTypeDiscussion, SearchTypeIssue, SearchTypeRepository, SearchTypeUser:
		return true
	}
	return false
}

func (e SearchType) String() string {
	return string(e)
}

func (e *SearchType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchType", str)
	}
	return nil
}

func (e SearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SearchType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SearchType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
